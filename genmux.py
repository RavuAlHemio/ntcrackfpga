#!/usr/bin/env python3
import math
import os
import sys
from typing import NamedTuple
import jinja2


MUX_READ_TEMPLATE = """
module mux_read_{{ mux.slice_size }}_of_{{ mux.full_size }} (
    input [{{ mux.full_size - 1 }}:0] full,
    input [{{ mux.index_size - 1 }}:0] index,
    input trigger,
    output reg [{{ mux.slice_size - 1}}:0] slice);

always @ (posedge trigger) begin
    case (index)
        {%- for i in range(mux.max_index + 1) %}
        {{ i }}: slice <= full[{{ mux.slice_size*(i+1) - 1 }}:{{ mux.slice_size*i }}];
        {%- endfor %}
        default: slice <= {{ mux.slice_size }}'bX;
    endcase
end

endmodule
"""


MUX_WRITE_TEMPLATE = """
module mux_write_{{ mux.slice_size }}_of_{{ mux.full_size }} (
    output reg [{{ mux.full_size - 1 }}:0] full,
    input [{{ mux.index_size - 1 }}:0] index,
    input trigger,
    input [{{ mux.slice_size - 1}}:0] slice);

always @ (posedge trigger) begin
    case (index)
        {%- for i in range(mux.max_index + 1) %}
        {{ i }}: full[{{ mux.slice_size*(i+1) - 1 }}:{{ mux.slice_size*i }}] <= slice;
        {%- endfor %}
        default: ;
    endcase
end

endmodule
"""


class Multiplexer(NamedTuple):
    slice_size: int
    full_size: int

    @property
    def max_index(self):
        return self.full_size // self.slice_size - 1

    @property
    def index_size(self):
        return int(math.log2(self.max_index + 1))


def main():
    if len(sys.argv) != 2:
        print("Usage: genmux.py OUTPUTDIR", file=sys.stderr)
        sys.exit(1)

    multiplexers = [
        Multiplexer(
            slice_size=128,
            full_size=128*128,
        ),
        Multiplexer(
            slice_size=8,
            full_size=128*128,
        ),
    ]

    read_tpl = jinja2.Template(
        MUX_READ_TEMPLATE,
        undefined=jinja2.StrictUndefined,
    )
    write_tpl = jinja2.Template(
        MUX_WRITE_TEMPLATE,
        undefined=jinja2.StrictUndefined,
    )

    for mux in multiplexers:
        result = read_tpl.render(mux=mux)
        with open(os.path.join(sys.argv[1], f"mux_read_{mux.slice_size}_of_{mux.full_size}.v"), "w", encoding="us-ascii") as f:
            f.write("// This file has been autogenerated. Manual changes will be lost.\n")
            f.write(result)
        result = write_tpl.render(mux=mux)
        with open(os.path.join(sys.argv[1], f"mux_write_{mux.slice_size}_of_{mux.full_size}.v"), "w", encoding="us-ascii") as f:
            f.write("// This file has been autogenerated. Manual changes will be lost.\n")
            f.write(result)


if __name__ == "__main__":
    main()
