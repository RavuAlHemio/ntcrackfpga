#!/usr/bin/env python3
import sys

PASSWORD_CHARS = 20
TEMPLATE = """
function [511:0] password_to_md4_data(
    input [{input_topbit}:0] in,
    input [7:0] len);
    begin
        case (len)
{md4_cases}
            default: password_to_md4_data = 512'h00;
        endcase
    end
endfunction
"""

def main():
    if len(sys.argv) != 2:
        print("Usage: genencode.py OUTPUT", file=sys.stderr)
        sys.exit(1)

    utf16_topbit = PASSWORD_CHARS * 8 * 2 - 1
    input_topbit = PASSWORD_CHARS * 8 - 1

    md4_cases = []
    for n in range(PASSWORD_CHARS+1):
        case_pieces = [f"            {n}: password_to_md4_data = ", "{ "]

        # generate the conversion to UTF-16
        for i in range(n):
            input_piece_topbit = input_topbit - i * 8
            input_piece_bottombit = input_piece_topbit - 7
            if i != 0:
                case_pieces.append(", ")
            case_pieces.append(f"in[{input_piece_topbit}:{input_piece_bottombit}]")
            case_pieces.append(", 8'h0")

        # generate the padding
        if n > 0:
            case_pieces.append(", ")
        case_pieces.append("8'h80")

        utf16_byte_count = n * 2
        utf16_bit_count = utf16_byte_count * 8
        # 64 bytes per chunk minus 8 bytes length minus 1 byte 0x80 minus data bytes
        zero_padding_byte_count = 64 - (8 + 1 + utf16_byte_count)
        zero_padding_bit_count = zero_padding_byte_count*8
        case_pieces.append(f", {zero_padding_bit_count}'h0")

        # generate the length (in bits as 64-bit little-endian)
        len_bytes = utf16_bit_count.to_bytes(2, "little")
        for lb in len_bytes:
            case_pieces.append(f", 8'h{lb:02x}")
        len_bits_remain = 64 - 8*len(len_bytes)
        case_pieces.append(f", {len_bits_remain}'h00")

        case_pieces.append(" };")
        md4_cases.append("".join(case_pieces))

    md4_cases_str = "\n".join(md4_cases)

    output = TEMPLATE.replace("{input_topbit}", str(input_topbit)).replace("{md4_cases}", md4_cases_str)

    with open(sys.argv[1], "w", encoding="us-ascii") as f:
        f.write("// This file has been autogenerated. Manual changes will be lost.\n")
        f.write(output)


if __name__ == "__main__":
    main()
